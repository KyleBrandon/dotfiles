" Start 'er up!
filetype off
call pathogen#incubate()
call pathogen#helptags()

let java_highlight_all=1

" call pathogen#helptags()
filetype plugin indent on
syntax on

" Forte
let g:syntastic_java_checkers=['javac', 'checkstyle']
let g:syntastic_java_checkstyle_classpath = '~/bin/checkstyle-5.5-all.jar'
let g:syntastic_java_checkstyle_conf_file = '~/bin/checker.xml'
let g:syntastic_java_javac_maven_args = "-Dplatform.classifier=overture -Poverture"

" Leader maps
noremap \ ,
let mapleader=","

" Just say no
nnoremap <leader>x <esc>:call ToggleHardMode()<cr>

" Internal macros
runtime macros/matchit.vim        " Load the matchit plugin.

" Mercurial Blame
vmap <Leader>b :<C-U>!hg blame -fu <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

" Tern
let g:tern_map_keys=1
let g:tern_show_argument_hints='on_hold'
nmap <Leader>td :TernDoc<cr>
nmap <Leader>tt :TernType<cr>
nmap <Leader>td :TernDef<cr>
nmap <Leader>tR :TernRename<cr>

" Command-T remaps
nmap <leader>o :CommandT<CR>
nmap <leader>O :CommandTFlush<CR>
nmap <leader>m :CommandTBuffer<CR>
let g:CommandTCancelMap = ['<ESC>', '<C-c>']
let g:CommandTMaxHeight=50
let g:CommandTMatchWindowAtTop=0

" CTags remaps
nmap <leader>c :!ctags -R --exclude='.hg'<CR>
nmap <leader>f <C-]>
nmap <leader>r <C-o>

" Dash
nmap <silent> <leader>d <Plug>DashSearch

" Gundo
nnoremap <F5> :GundoToggle<cr>




" Map tab to indent in visual mode
vmap <tab> >gv
vmap <s-tab> <gv
vmap > >gv
vmap < <gv

" imap <tab> <c-r>=<SID>InsertTabWrapper()<cr>
" imap <s-tab> <c-p>

" Cut-n-Paste
nmap <Leader>p "0p
nmap <Leader>P "0P
nmap <Leader>y "0y
nmap <Leader>Y "0Y
" nmap <leader>v V`]


" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
cmap %% <C-R>=expand('%:h').'/'<cr>
nmap <Leader>e :e %%
nmap <Leader>es :sp %%
nmap <Leader>ev :vsp %%

nmap <Leader>ve :e ~/.vimrc<CR>
nmap <Leader>te :e ~/.tmux.conf<CR>

nmap <leader>ae :e ~/.ackrc<cr>

" Open js test results
nmap <leader>t :e forte-js/target/js-test-result.xml<cr>

nmap <leader>j :e ~/scratch/scratch.txt<cr>

" Fix search
nmap / /\v
vmap / /\v
nmap ? ?\v
vmap ? ?\v
nmap <Leader>h :nohl<cr>
nmap <space> :nohl<cr>
nmap <leader>a :Ack --
nnoremap & :&&<cr>
xnoremap & :&&<cr>

set showmatch
set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

" Add * and # support to search for current selection
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

" Show invisibles
set list
set listchars=tab:▸\ ,eol:¬
highlight NonText guifg=#4a4a59

" Splits
set splitbelow
set splitright

nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

nmap <Leader>s :split<CR>            " New horizontal split on current file
nmap <Leader>v :vsplit<CR>           " New vertical split on current file
nmap <Leader>k :only<CR>                 " Make current split the only one

" Buffers
nmap <Leader><Leader> <C-^>          " Follow jump list back

"Color scheme
syntax enable
set background=dark
colorscheme solarized
set colorcolumn=120

imap <leader>u <esc>viwUea
nmap <leader>u :call <SID>Preserve("normal viwU")<cr>

" Remapp beginning and end of line.
nnoremap H 0
nnoremap HH ^
nnoremap L $


" Default settings
set spelllang=en_us
set nocompatible
set backspace=indent,eol,start      " Intuitive backspacing.
set history=1000
set ruler                           " Show cursor position.
set showcmd                         " Display incomplete commands.
set autoindent                      "
set nowrap
set backupdir=~/.tmp
set directory=~/.tmp                " Don't clutter my dirs up with swp and tmp files
set autoread
set laststatus=2
set showmode                      " Display the mode you're in.
set hidden                        " Handle multiple buffers better.
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.
set wildignore+=*.class,.git,.hg,*/target/*,*/node_modules/*
set number                        " Show line numbers.
set title                         " Set the terminal's title
set visualbell                    " No beeping.
set nobackup                        " Don't make a backup before overwriting a file.
set nowritebackup                   " And again.
set cursorline

set tabstop=8
set shiftwidth=4
set softtabstop=4
set expandtab
set shiftround

" (Hopefully) removes the delay when hitting esc in insert mode
set noesckeys
set timeout timeoutlen=500 ttimeoutlen=1


" Run a command saving the last search and curosr position.
function! s:Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! s:PreserveSearch(command)
    let _s=@/
    execute a:command
    let @/=_s
endfunction

" Bind _$ to remove whitespace
nmap _$ :call <SID>Preserve("%s/\\s\\+$//e")<CR>

" Bind _= to re-indent the buffer
nmap _= :call <SID>Preserve("normal gg=G")<CR>


augroup MyAutoCommands
    autocmd!
    filetype on

    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab

    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml

    "
    " Remove trailing space automatically on java and javascript files on save
    autocmd BufWritePre *.java,*.js,*.xml,*.html,*.properties :call <SID>Preserve("%s/\\s\\+$//e")

    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd BufRead,BufNewFile *.md setlocal spell
    autocmd BufRead,BufNewFile *.md setlocal textwidth=80


    " autocmd FocusLost * :wa
augroup END

" Vim
augroup Vim
    autocmd!
    filetype on

    autocmd FileType vim setlocal ts=4 sts=4 sw=4 expandtab foldmethod=marker

augroup END

" Javascript
augroup Javascript
    autocmd!
    filetype on
    "
    " Treat jshintrc as js
    autocmd BufRead,BufNewFile *.jshintrc setfiletype javascript

    autocmd FileType xml setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab spell
    autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab

    autocmd FileType javascript :DashKeywords="javascript underscrore backbone jquery"

augroup END

" Java groups
augroup Java
   autocmd!
   filetype on

    " autocmd FileType java noremap <silent> [[ :call <SID>PreserveSearch("silent normal! gg/{\r:nohl\r")<cr>
    autocmd FileType java noremap [[ [m
    autocmd FileType java noremap ]] ]m
    autocmd FileType java noremap [] [M
    autocmd FileType java noremap ][ ]M
    
    autocmd FileType java setlocal ts=4 sts=4 sw=4 expandtab foldmethod=indent
    autocmd FileType java :DashKeywords="javaee6 java7"

    autocmd BufNewFile,BufRead *.vm set filetype=html

augroup END

augroup Shell 
   autocmd!
   filetype on

   autocmd BufNewFile,BufRead *.hgrc set filetype=gitconfig
augroup END

function! s:VSetSearch()
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
    let @s = temp
endfunction

function! s:InsertTabWrapper()
    let col = col(".") - 1
    if !col || getline(".")[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE (thanks Gary Bernhardt)
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <Leader>n :call <SID>RenameFile()<cr>


:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)


