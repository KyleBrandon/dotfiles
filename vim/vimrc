" Start 'er up!
filetype off
call pathogen#incubate()
call pathogen#helptags()

let java_highlight_all=1

" call pathogen#helptags()
filetype plugin indent on
syntax on

" Leader maps
noremap \ ,
let mapleader=","

" Forte
let g:syntastic_java_checkers=['javac', 'checkstyle']
let g:syntastic_java_checkstyle_classpath = '~/bin/checkstyle-5.5-all.jar'
let g:syntastic_java_checkstyle_conf_file = '~/bin/checker.xml'
let g:syntastic_java_javac_maven_args = "-Dplatform.classifier=overture -Poverture"

nnoremap <leader>w :e reqs/
nnoremap <leader>q :call <SID>RunMarked()<cr>


" Just say no
nnoremap <leader>x <esc>:call ToggleHardMode()<cr>

" Internal macros
runtime macros/matchit.vim        " Load the matchit plugin.

" Mercurial Blame
vmap <Leader>b :<C-U>!hg blame -fu <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

" Command-T remaps
nmap <leader>o :CommandT<CR>
nmap <leader>O :CommandTFlush<CR>
nmap <leader>m :CommandTBuffer<CR>
nmap <leader>ov :CommandTFlush<cr>\|:CommandT test/js/views<cr>
nmap <leader>ov :CommandTFlush<cr>\|:CommandT test/js/views<cr>

let g:CommandTCancelMap = ['<ESC>', '<C-c>']
let g:CommandTMaxHeight=50
let g:CommandTMatchWindowAtTop=0

" CTags remaps
nnoremap <leader>c :!ctags -R --exclude='.hg'<CR>
nnoremap <leader>f <C-]>
nnoremap <leader>r <C-o>

" Dash
nmap <silent> <leader>d <Plug>DashSearch

" Gundo
nnoremap <F5> :GundoToggle<cr>

" Map tab to indent in visual mode
vmap <tab> >gv
vmap <s-tab> <gv
vmap > >gv
vmap < <gv

" imap <tab> <c-r>=<SID>InsertTabWrapper()<cr>
" imap <s-tab> <c-p>

" Cut-n-Paste
nnoremap <Leader>p "0p
nnoremap <Leader>P "0P
nnoremap <Leader>y "0y
nnoremap <Leader>Y "0Y
" nnoremap <leader>v V`]

"Quick editing {{{
" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
cmap %% <C-R>=expand('%:h').'/'<cr>
nmap <Leader>e :e %%

nnoremap <leader>ea :vsplit ~/.ackrc<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>et :vsplit ~/.tmux.conf<cr>
nnoremap <leader>ez :vsplit ~/bin/dotfiles/zshrc<cr>
nnoremap <leader>eh :vsplit ~/.hgrc<cr>
nnoremap <leader>ed :vsplit ~/.vim/custom-dictionary.utf-8.add<cr>
nnoremap <leader>es :vsplit ~/scratch/scratch.txt<cr>
nnoremap <leader>t :call <SID>OpenTestFixture()<cr>

" }}}

" Fix search
nnoremap / /\v
vmap / /\v
nnoremap ? ?\v
vmap ? ?\v
nnoremap <Leader>h :nohl<cr>
nnoremap <space> :nohl<cr>
nnoremap <leader>a :Ack --
nnoremap & :&&<cr>
xnoremap & :&&<cr>

set showmatch
set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

" Add * and # support to search for current selection
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

" Show invisibles
set list
set listchars=tab:▸\ ,eol:¬
highlight NonText guifg=#4a4a59

" Splits
set splitbelow
set splitright

nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

nnoremap <Leader>s :split<CR>            " New horizontal split on current file
nnoremap <Leader>v :vsplit<CR>           " New vertical split on current file
nnoremap <Leader>k :only<CR>                 " Make current split the only one

" Buffers
nnoremap <Leader><Leader> <C-^>          " Follow jump list back

"Color scheme
syntax enable
set background=dark
colorscheme solarized
set colorcolumn=120

imap <leader>u <esc>viwUea
nnoremap <leader>u :call <SID>Preserve("normal viwU")<cr>

" Remapp beginning and end of line.
nnoremap H 0
nnoremap HH ^
nnoremap L $

" Backups {{{
set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/.tmp/undo//     " undo files
set backupdir=~/.tmp/backup// " backups
set directory=~/.tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
" }}}

" Default settings
set spelllang=en_us
set nocompatible
set backspace=indent,eol,start      " Intuitive backspacing.
set history=1000
set ruler                           " Show cursor position.
set showcmd                         " Display incomplete commands.
set autoindent                      "
set autoread
set laststatus=2
set showmode                      " Display the mode you're in.
set hidden                        " Handle multiple buffers better.
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.
set wildignore+=*.class,.git,.hg,*/target/*,*/node_modules/*
set number                        " Show line numbers.
set title                         " Set the terminal's title
set visualbell                    " No beeping.
set cursorline
set nowrap

set tabstop=8
set shiftwidth=4
set softtabstop=4
set expandtab
set shiftround

" (Hopefully) removes the delay when hitting esc in insert mode
set noesckeys
set timeout timeoutlen=500 ttimeoutlen=1


" Run a command saving the last search and curosr position.
function! s:Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! s:PreserveSearch(command)
    let _s=@/
    execute a:command
    let @/=_s
endfunction

" Bind _$ to remove whitespace
nnoremap _$ :call <SID>Preserve("%s/\\s\\+$//e")<CR>

" Bind _= to re-indent the buffer
nnoremap _= :call <SID>Preserve("normal gg=G")<CR>

augroup MyAutoCommands
    autocmd!
    filetype on

    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab

    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml

    " Remove trailing space automatically on java and javascript files on save
    autocmd BufWritePre *.java,*.js,*.xml,*.html,*.properties :call <SID>Preserve("%s/\\s\\+$//e")



    " autocmd FocusLost * :wa
augroup END

" Markdown
augroup Markdown
    autocmd!
    filetype on

    autocmd FileType markdown setlocal ts=4 sts=4 sw=4 expandtab foldmethod=marker spell
    autocmd FileType markdown setlocal textwidth=120 colorcolumn=120
    autocmd BufRead,BufNewFile *.md set filetype=markdown

augroup END

" Vim
augroup Vim
    autocmd!
    filetype on

    autocmd FileType vim setlocal ts=4 sts=4 sw=4 expandtab foldmethod=marker
    autocmd FileType vim :DashKeywords="vim"
    set colorcolumn=120
augroup END

" Javascript
augroup Javascript
    autocmd!
    filetype on
    "
    " Treat jshintrc as js
    autocmd BufRead,BufNewFile *.jshintrc setfiletype javascript

    autocmd FileType xml setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab spell
    autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab

    autocmd FileType javascript :DashKeywords="javascript underscrore backbone jquery"
    autocmd FileType javascript setlocal efm=%f:%l\ %m

augroup END

" Java groups
augroup Java
   autocmd!
   filetype on

    " autocmd FileType java noremap <silent> [[ :call <SID>PreserveSearch("silent normal! gg/{\r:nohl\r")<cr>
    autocmd FileType java noremap [[ [m
    autocmd FileType java noremap ]] ]m
    autocmd FileType java noremap [] [M
    autocmd FileType java noremap ][ ]M
    
    autocmd FileType java setlocal ts=4 sts=4 sw=4 expandtab foldmethod=indent
    autocmd FileType java :DashKeywords="javaee6 java7"

    autocmd BufNewFile,BufRead *.vm set filetype=html

augroup END

augroup Shell 
   autocmd!
   filetype on

   autocmd BufNewFile,BufRead *.hgrc set filetype=gitconfig
augroup END

function! s:VSetSearch()
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
    let @s = temp
endfunction

function! s:InsertTabWrapper()
    let col = col(".") - 1
    if !col || getline(".")[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
endfunction

function! s:RunMarked()
    execute "silent !open -a marked ".bufname("%")
    redraw!
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE (thanks Gary Bernhardt)
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <Leader>n :call <SID>RenameFile()<cr>


:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

" OpenTestFixture()  {{{1
function! s:OpenTestFixture() 
    let test_path = <SID>BuildTestPath()
    let test_name = <SID>BuildTestFileName()

    exec ':vsplit ' . test_path.'/'.test_name
endfunction

function! s:BuildTestPath()
    let current_path = expand('%:h')
    let test_path = substitute(current_path, 'main/', 'test/', '')
    let alternate_test_path = test_path

    let file_ext = expand('%:e')
    if file_ext ==? 'js' && match(test_path, '/fjs$') > -1
        " if the js test path ends in '/fjs' the remove it. 
        let alternate_test_path = fnamemodify(test_path, ':h')
    elseif file_ext ==? 'java'
        " Some java test paths live in an additional '/test' subfolder
        let alternate_test_path = test_path.'/test'
    else
        " nothing to special case so use the default
        let alternate_test_path = test_path
    endif

    if isdirectory(alternate_test_path)
        " We found an alternate_test_path so use it.
        return alternate_test_path
    elseif isdirectory(test_path)
        " Use a nice clean test path
        return test_path
    else
        " can't find a test path so use the current code folder
        return current_path
    endif
endfunction

function! s:BuildTestFileName()
    let current_name = expand('%:t')
    let js_file = match(current_name, '\.js$')
    if js_file > -1
        return 'test-'.current_name
    else
        return substitute(current_name, '\v\.(.*)', 'Test.\1', '')
    endif
endfunction

"}}}

" JavascriptTestRunner() {{{1
map <Leader>tt :call <SID>RunTest()<cr>

function! s:RunTest()

    let current_name = expand('%:t')
    let js_file = match(current_name, '\.js$')
    if js_file
        echom 'call RunTestJavascript'
        let result = <SID>RunJavascriptTest()
    else
        echom 'No test runner for '.current_name
    endif

endfunction

function! s:RunJavascriptTest()
    let temppath = resolve(tempname())
    let outfile = temppath . '.out'
    let errfile = temppath . '.err'
    let runner_command = 'phantomjs test/qunit-runner.js test/runner.html --outputFormat=vim'

    silent! execute '!' . runner_command . ' > ' . outfile . ' 2> ' . errfile
    execute 'redraw!'
    execute ':cfile ' . outfile

endfunction

"}}}

