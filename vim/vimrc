" Start 'er up!
filetype off
call pathogen#incubate()
call pathogen#helptags()

" call pathogen#helptags()
filetype plugin indent on
syntax on

let g:syntastic_java_javac_maven_args="-Dplatform.classifier=overture -Poverture"

" Leader maps
noremap \ ,
let mapleader=","


" Just say no
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

" Map tab to indent in visual mode
vmap <Tab> >gv
vmap <S-Tab> <gv
vmap > >gv
vmap < <gv

" Map tab to auto complete in insert mode
" imap <Tab> <C-n>
" imap <S-Tab> <C-p>


" Command-T remaps
nnoremap <leader>o :CommandT<CR>
nnoremap <leader>O :CommandTFlush<CR>
nnoremap <leader>m :CommandTBuffer<CR>
let g:CommandTCancelMap = ['<ESC>', '<C-c>']
let g:CommandTMaxHeight=50
let g:CommandTMatchWindowAtTop=0

" CTags remaps
nnoremap <leader>c :!ctags -R --exclude='.hg'<CR>
noremap <leader>f <C-]>
noremap <leader>r <C-t>

:nmap <silent> <leader>d <Plug>DashSearch

" Keyboard mappings
map <Leader>h :nohl<cr>
nmap <Leader>p "0p
nmap <Leader>P "0P
nmap <Leader>y "0y
nmap <Leader>Y "0Y

" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <Leader>e :e %%
map <Leader>es :sp %%
map <Leader>ev :vsp %%

map <Leader>sv :so ~/.vimrc<CR>
" map <Leader>ev :e ~/.vimrc<CR>
" map <Leader>et :e ~/.tmux.conf<CR>


" Splits
set splitbelow
set splitright

nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

map <Leader>s :split<CR>            " New horizontal split on current file
map <Leader>v :vsplit<CR>           " New vertical split on current file
map <Leader>k :only<CR>                 " Make current split the only one

" Buffers

map <Leader><Leader> <C-^>          " Switch to previous buffer


" Mercurial Blame
vmap <Leader>b :<C-U>!hg blame -fu <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>


" Tern
let g:tern_map_keys=1
let g:tern_show_argument_hints='on_hold'
map <Leader>td :TernDoc<cr>
map <Leader>tt :TernType<cr>
map <Leader>td :TernDef<cr>
map <Leader>tR :TernRename<cr>

        
        
"Color scheme
syntax enable
set background=dark
colorscheme solarized

" Default settings
set nocompatible
set backspace=indent,eol,start      " Intuitive backspacing.
set history=1000
set ruler                           " Show cursor position.
set showcmd                         " Display incomplete commands.
set autoindent                      " 
set showmatch
set nowrap
set backupdir=~/.tmp
set directory=~/.tmp                " Don't clutter my dirs up with swp and tmp files
set autoread
set laststatus=2
set showmode                      " Display the mode you're in.
set hidden                        " Handle multiple buffers better.
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.
set wildignore+=*.class,.git,.hg,*/target/*
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
set number                        " Show line numbers.
set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.
set title                         " Set the terminal's title
set visualbell                    " No beeping.
set nobackup                        " Don't make a backup before overwriting a file.
set nowritebackup                   " And again.
set listchars=tab:▸\ ,eol:¬
set cursorline

highlight NonText guifg=#4a4a59

set list
set tabstop=8
set shiftwidth=4
set softtabstop=4
set expandtab

" (Hopefully) removes the delay when hitting esc in insert mode

set noesckeys
set timeout timeoutlen=500 ttimeoutlen=1

runtime macros/matchit.vim        " Load the matchit plugin.

" Fuzzy finder: ignore stuff that can't be opened, and generated files
let g:fuzzy_ignore = "*.png;*.PNG;*.JPG;*.jpg;*.GIF;*.gif;vendor/**;coverage/**;tmp/**;rdoc/**"

" Disable Ex mode
map Q <Nop>


" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
    let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
    if l:tabstop > 0
        let &l:sts = l:tabstop
        let &l:ts = l:tabstop
        let &l:sw = l:tabstop
    endif
    call SummarizeTabs()
endfunction

function! SummarizeTabs()
    try
        echohl ModeMsg
        echon 'tabstop='.&l:ts
        echon ' shiftwidth='.&l:sw
        echon ' softtabstop='.&l:sts
        if &l:et
            echon ' expandtab'
        else
            echon ' noexpandtab'
        endif
    finally
        echohl None
    endtry
endfunction

" Run a command saving the last search and curosr position.
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Bind _$ to remove whitespace
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" Bind _= to re-indent the buffer
nmap _= :call Preserve("normal gg=G")<CR>


" Only do this part when compiled with support for autocommands
if has("autocmd")
    " Enable file type detection
    filetype on

    " Syntax of these languages is fussy over tabs Vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab

    " Customisations based on house-style (arbitrary)
    autocmd FileType xml setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType java setlocal ts=4 sts=4 sw=4 expandtab

    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml
    "
    " Remove trailing space automatically on java and javascript files on save
    autocmd BufWritePre *.java,*.js,*.xml,*.properties :call Preserve("%s/\\s\\+$//e")

    autocmd FileType java :DashKeywords="javaee6 java6"
    autocmd FileType javascript :DashKeywords="javascript underscrore backbone jquery"

    au BufRead,BufNewFile *.md set filetype=markdown
    au BufRead,BufNewFile *.md setlocal spell
    au BufRead,BufNewFile *.md setlocal textwidth=80
endif

" Add * and # support to search for current selection
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

function! s:VSetSearch()
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
    let @s = temp
endfunction

